/*
 * Программа ввода кодов цифровых символов в буфер и вывода сообщений в стандартный вывод.
 */

.include "my-macro"

.bss
    .lcomm buf, 100 # буфер для хранения прочитанных символов. Размер - 100 байт
    .lcomm c, 1	# буфер для чтения текущего символа. Размер - 1 байт
	
.text
.global _start

_start:
    sub	%esi, %esi     # указатель адреса байта в буфере символов (индексный регистр)  
    
show_prompt:
    Puts "Вводите цифру, друг мой!" 	# макровызов вывода строки на стандартный
					# вывод (подсказка ввода)

kbd_input:
    Getchar $c          # макровызов ввода символа со стандартного ввода
    
    cmpl $0, %eax 	# Конец файл - EOF (введено 0 символов) ? 
    je stop		# Да - на завершение программы
    
    cmpb $'\n', c 	# это символ перевода строки ?
    je eax_input 	# ДА - на вывод следующегопредыдущего символа в %eax
    cmpb $'9', c  	# код больше кода символа '9' ?
    ja print_err_msg	# ДА - на вывод сообщения об ошибке
    cmpb $'0', c	# код меньше кода символа '0' ?
    jb print_err_msg	# ДА - на вывод сообщения об ошибке

    movb c, %al         # код из с пишем в al

    cmpl $100, %esi	# Сравниваем esi с сотней
    je print_end_buffer	# Если верно то вывод ошибки о заполнении буфера
	
    movb %al, buf(%esi) # Загрузить содержимое al (введенный символ) в байт по
			# адресу buf + esi (буфер для вводимых символов)
    incl %esi		# указать на следующий адрес буфера для следующего символа
    Puts "Цифра! Хорошо." # вывод сообщения об успешном вводе
    
    jmp show_prompt	# на ввод следующего символа

print_err_msg:
    Puts "Не цифровая клавиша. Повторите ввод"	# вывод сообщения об ошибке
    jmp show_prompt 	# на ввод следующего символа

stop:
	Exit $0

print_end_buffer:
	Puts "Буффеер переполнен" # Вывод сообщения об ошибке
	jmp stop		  # выход из программы
	
eax_input:
	movl %esi,%ebx 		# Копируем %esi в %ebx
	decl %ebx		# Уменьшаем %ebx на 1
	cmpl $0, %ebx 		# Сравниваем %ebx с 0
	jl kbd_input 		# ДА - переход к началу программы для ввода следующего символа
	movb buf(%ebx), %al	# Копируем ячейку buf + %ebx в %al
	subb $0x30, %al		# Отнимаем 30 от кода сивола для получения числового значения
	jmp kbd_input		# Переход к началу программы


.end
