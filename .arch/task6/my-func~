# Макрос для подсчёта длинны строки(результат в %edx). Концом строки считается \0 
.macro Strlen str
	xorl %edx, %edx		# Обнуляем %edx.

strlen_begin\@:
	
	movb \str(%edx), %al	# Копируем байт строки в %al.
	cmpb $0, %al		# Символ конца строки?
	je strlen_end\@		# Да, выходим.
	incl %edx		# Нет, увеличиваем %edx на 1 ...
	jmp strlen_begin\@	# и переходим в начало цикла
	
strlen_end\@:	
.endm


# Макрос вывода строки на экран. Единственный параметр - буфер в памяти
.macro Write string

	Strlen \string
	movl $4, %eax		# номер сист. вызова write
	movl $1, %ebx		# параметр 1: дескриптор стандартного вывода	
	movl $\string, %ecx	# параметр 2: адрес памяти с выводимыми символами

	int $0x80		# выполнить системный вызов

.endm

# Результат в %eax
.macro get_el matr, i, j
	
	movl \i, %ebx
	
	movl \j, %ecx
	movl $24, %eax
	mulw %cx
	movw %ax, %cx
	
	movl $\matr, %edx
	addl %ecx, %edx
	
	movl (%edx, %ebx, 4), %eax
.endm


# Макрос перевода числа в строку с основанием 10. Number - число(4 байта), String буфер, куда помещаеся строка(11 байт)
.macro ToString Number, String

	movl $10, %ebx		# Система счисления. На неё будем делить
	movl $9, %esi		# Адрес самого первого чила. В числе не может быть больше 10 чисел, поэтому устанавливаем смещение на 9
	movl \Number, %eax	# Копируем номер в %ax
	xorl %edi, %edi		# Обнуляем %edi

ToString_begin\@:		  	# Начало цикла
	movl $0, %edx		# Обнуляем %edx (В нём после операции будет остаток)
	divl %ebx		# Делим %ax на %bx, остаток в %dx
	addb $0x30, %dl		# Прибавляем к %dl 0x30, чтобы перейти к коду числа. Остаток влезает в %dl потому что делим на 10(Отсекается 1 число).
	movb %dl, \String(%esi)	# Копируем содержимое %dl в буфер по нужному смещению

	cmpl $0, %eax		# Дошли до нуля? (В %ax пусто?)
	je ToString_memcpy\@	# Да, заканчиваем преобразование

	decl %esi		# Нет, уменьшаем %esi на 1
	jmp ToString_begin\@	# и переходим в начало цикла

ToString_memcpy\@:	
	cmpl  $10, %esi		# В %esi 10?
	je ToString_end\@	# Да, выходим
	
	movb \String(%esi), %al # Копируем байт по адресу  String(%esi) в %al
	movb $0, \String(%esi)	# Записываем 0 по адресу String(%esi)
	movb %al, \String(%edi)	# Записываем значение %al по адресу String(%edi)
	inc %esi		# Увеличиваем %esi на 1
	inc %edi		# Увеличиваем %edi на 1
	jmp ToString_memcpy\@	# Переходим в начало цикла

ToString_end\@:
	movb $0, \String(%edi)
.endm

